from tkinter import *
import tkinter as tk
from tkinter import ttk
from tkinter import font
from tkinter import messagebox
from tkinter.font import BOLD
from tkinter.ttk import Treeview
from unicodedata import name
import mysql.connector


root = Tk()
root.geometry('1400x800') #width x heigh
root.config(background='White')

mydb=mysql.connector.connect(
            host= "127.0.0.1",
            user= "root",
            password= "2193ECAstle!!",
            database='student_mgmt',
            autocommit=True)
mycursor= mydb.cursor()

query = 'select * from student_card'
mycursor.execute(query)


#-------------------function section------------------------
def display():
    try:
        mydb=mysql.connector.connect(
            host= "127.0.0.1",
            user= "root",
            password= "2193ECAstle!!",
            database='student_mgmt',
            autocommit=True)
        mycursor= mydb.cursor()
        messagebox.showinfo(title='Success', message='Connected to One Piece DB successfully')
    except:
        messagebox.showerror(title='Error', message='Cannot connect to DB, examine MySQL connection')

def add():
        try:
            mydb=mysql.connector.connect(
                host= "127.0.0.1",
                user= "root",
                password= "2193ECAstle!!",
                database='student_mgmt',
                autocommit=True)
            mycursor= mydb.cursor()
            messagebox.showinfo(title='Success', message='Connected to One Piece DB successfully')
        except:
            messagebox.showerror(title='Error', message='Cannot connect to DB, examine MySQL connection')

def delete():
    try:
        mydb=mysql.connector.connect(
            host= "127.0.0.1",
            user= "root",
            password= "2193ECAstle!!",
            database='student_mgmt',
            autocommit=True)
        mycursor= mydb.cursor()
        messagebox.showinfo(title='Success', message='Connected to One Piece DB successfully')
    except:
        messagebox.showerror(title='Error', message='Cannot connect to DB, examine MySQL connection')

def update():
    try:
        mydb=mysql.connector.connect(
            host= "127.0.0.1",
            user= "root",
            password= "2193ECAstle!!",
            database='student_mgmt',
            autocommit=True)
        mycursor= mydb.cursor()
        messagebox.showinfo(title='Success', message='Connected to One Piece DB successfully')
    except:
        messagebox.showerror(title='Error', message='Cannot connect to DB, examine MySQL connection')



#-------------------widget section for labels------------------------
header = Label(root, text='Student Management Portal', font=('Arial', 24, BOLD), background='white')
header.place(x=550, y=0)

#'first_name', 'last_name', 'birthdate', 'phone', 'email', 'street_addr', 'city', 'state', 'country', 'begin_year', 'expected_grad_yr', 'major'

studentID = Label(root, text='Student ID *', font=('Arial', 16, BOLD), background='White')
studentID.place(x=0, y=70)

firstName = Label(root, text='First Name', font=('Arial', 16, BOLD), background='White')
firstName.place(x=0, y=130)

lastName = Label(root, text='Last Name', font=('Arial', 16, BOLD), background='White')
lastName.place(x=0, y=190)

birthdayLabel = Label(root, text='Birthday', font=('Arial', 16, BOLD), background='White')
birthdayLabel.place(x=0, y=250)

phoneLabel = Label(root, text='Phone', font=('Arial', 16, BOLD), background='White')
phoneLabel.place(x=0, y=310)

emailLabel = Label(root, text='Email', font=('Arial', 16, BOLD), background='White')
emailLabel.place(x=0, y=370)

addrLabel = Label(root, text='Street addr', font=('Arial', 16, BOLD), background='White')
addrLabel.place(x=0, y=430)


#-------------------widget section for entry boxes------------------------
student_ID_Entry = Entry(root, font=('Arial', 16), width=85, bd=5)
student_ID_Entry.place(x=220, y=70)

firstnameEntry = Entry(root, font=('Arial', 16), width=85, bd=5)
firstnameEntry.place(x=220, y=130)

lastnameEntry = Entry(root, font=('Arial', 16), width=85, bd=5)
lastnameEntry.place(x=220, y=190)

birthdate_entry = Entry(root, font=('Arial', 16), width=85, bd=5)
birthdate_entry.place(x=220, y=250)

phoneEntry = Entry(root, font=('Arial', 16), width=85, bd=5)
phoneEntry.place(x=220, y=310)

emailEntry = Entry(root, font=('Arial', 16), width=85, bd=5)
emailEntry.place(x=220, y=370)

addrEntry = Entry(root, font=('Arial', 16), width=85, bd=5)
addrEntry.place(x=220, y=430)


#-------------------widget section for buttons------------------------
displayBtn = Button(root, text='Display All', font=('Arial', 16, BOLD), background='#149cf7', activebackground='#149cf7', padx=20)
displayBtn.place(x=10, y=500)

addBtn = Button(root, text='Add Student', font=('Arial', 16, BOLD), background='#149cf7', activebackground='#149cf7', padx=20, command=add)
addBtn.place(x=190, y=500)

deleteBtn = Button(root, text='Delete Student', font=('Arial', 16, BOLD), background='#ed2630', activebackground='#ed2630', padx=20)
deleteBtn.place(x=390, y=500)

updateBtn = Button(root, text='Update Record', font=('Arial', 16, BOLD), background='#149cf7', activebackground='#149cf7', padx=20)
updateBtn.place(x=610, y=500)

searchBtn = Button(root, text='Search', font=('Arial', 16, BOLD), background='#149cf7', activebackground='#149cf7', padx=20)
searchBtn.place(x=830, y=500)


tree = Treeview(root)
tree['show']='headings'

# themes available to use 'clam', 'alt', 'default', 'classic'   these 2 do not work --> 'vista', 'xpnative'
s = ttk.Style(root)
s.theme_use('default')

s.configure('Treeview.Heading', foreground='red', font=('Helvetica', 12, BOLD)) #For the column headers
s.configure('.', font=('Arial', 11))

#define num of columns, must be a tuple
tree['columns']=('first_name', 'last_name', 'birthdate', 'phone', 'email', 'street_addr', 'city', 'zipcode', 'state', 'country', 'begin_year', 'expected_grad_year', 'major')




#assign the width
tree.column('first_name', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('last_name', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('birthdate', width=140, minwidth=100, anchor=tk.CENTER)
tree.column('phone', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('email', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('street_addr', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('city', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('zipcode', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('state', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('country', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('begin_year', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('expected_grad_year', width=180, minwidth=160, anchor=tk.CENTER)
tree.column('major', width=180, minwidth=160, anchor=tk.CENTER)





#Assign the heading names to the columns
tree.heading('first_name', text='First name', anchor=tk.CENTER)
tree.heading('last_name', text='Last Name', anchor=tk.CENTER)
tree.heading('birthdate', text='Birthday', anchor=tk.CENTER)
tree.heading('phone', text='Phone', anchor=tk.CENTER)
tree.heading('email', text='Email', anchor=tk.CENTER)
tree.heading('street_addr', text='Street Address', anchor=tk.CENTER)
tree.heading('city', text='City', anchor=tk.CENTER)
tree.heading('zipcode', text='Zipcode', anchor=tk.CENTER)
tree.heading('state', text='State', anchor=tk.CENTER)
tree.heading('country', text='Country', anchor=tk.CENTER)
tree.heading('begin_year', text='Beginning Yr', anchor=tk.CENTER)
tree.heading('expected_grad_year', text='Exp Grad Yr', anchor=tk.CENTER)
tree.heading('major', text='Major', anchor=tk.CENTER)


i=0
for row in mycursor:
    tree.insert('', i, text='', values=(row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10], row[11]))
    i=i+1

#Horizonotal scroll bar
hsb = ttk.Scrollbar(root, orient='horizontal')

hsb.configure(command=tree.xview)
tree.configure(xscrollcommand=hsb.set)
hsb.pack(fill=X, side=BOTTOM)


vsb = ttk.Scrollbar(root, orient='vertical')

vsb.configure(command=tree.yview)
tree.configure(yscrollcommand=vsb.set)
vsb.pack(fill=Y, side=RIGHT)

tree.pack(side=BOTTOM)


root.mainloop()
